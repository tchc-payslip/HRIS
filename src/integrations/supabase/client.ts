// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase';
import ExcelJS from 'exceljs';
import { toast } from 'sonner';  // or whatever toast library you're using

if (!import.meta.env.VITE_SUPABASE_URL) {
  throw new Error('Missing env.VITE_SUPABASE_URL');
}
if (!import.meta.env.VITE_SUPABASE_ANON_KEY) {
  throw new Error('Missing env.VITE_SUPABASE_ANON_KEY');
}

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// Test function to verify Supabase connection
export async function testSupabaseConnection() {
  try {
    const { data, error } = await supabase.from('employee_information').select('count').single();
    
    if (error) {
      console.error('Supabase connection test failed:', error.message);
      return { success: false, error: error.message };
    }
    
    console.log('Supabase connection test successful!');
    return { success: true, data };
  } catch (err) {
    console.error('Supabase connection test failed:', err);
    return { success: false, error: err instanceof Error ? err.message : 'Unknown error' };
  }
}

interface ShiftUploadProps {
    selectedMonth: Date;
    currentTenantId: number;
}

export interface ShiftData {
    employee_id: number;
    tenant_id: number;
    month: string;
    shifts: Record<string, string>;
}

export async function fetchEmployeesAndShifts(selectedMonth: Date, currentTenantId: number) {
    try {
        const firstDayOfMonth = new Date(selectedMonth.getFullYear(), selectedMonth.getMonth(), 1);
        const { data, error } = await supabase
            .from('shift_plan')
            .select(`
                *,
                employee_information (
                    employee_id,
                    full_name,
                    department,
                    employee_type
                )
            `)
            .eq('month', firstDayOfMonth.toISOString().split('T')[0])
            .eq('tenant_id', currentTenantId);

        if (error) throw error;
        
        // Return empty array instead of null if no data found
        return data || [];
    } catch (error) {
        console.error('Error fetching data:', error);
        // Return empty array instead of throwing error
        return [];
    }
}

export async function handleFileUpload(
    event: React.ChangeEvent<HTMLInputElement>,
    { selectedMonth, currentTenantId }: ShiftUploadProps
) {
    try {
        console.log('Starting file upload process...');
        const file = event.target.files?.[0];
        if (!file) return;

        console.log('Parsing shift data from file...');
        const workbook = new ExcelJS.Workbook();
        await workbook.xlsx.load(await file.arrayBuffer());
        const worksheet = workbook.getWorksheet(1);

        if (!worksheet) {
            throw new Error('No worksheet found in Excel file');
        }

        // Get the selected month's first day
        const firstDayOfMonth = new Date(selectedMonth.getFullYear(), selectedMonth.getMonth(), 1);
        const monthString = firstDayOfMonth.toISOString().split('T')[0];
        
        const shifts: ShiftData[] = [];
        worksheet.eachRow((row, rowNumber) => {
            if (rowNumber === 1) return; // Skip header

            const employeeId = row.getCell(1).value;
            if (!employeeId) return;

            const shiftData: ShiftData = {
                employee_id: Number(employeeId),
                tenant_id: currentTenantId,
                month: monthString,
                shifts: {}
            };

            // Start from column 2 (after employee_id)
            for (let day = 1; day <= 31; day++) {
                const value = row.getCell(day + 1).value?.toString().trim();
                if (value !== '') {
                    shiftData.shifts[day.toString()] = value;
                }
            }

            shifts.push(shiftData);
        });

        console.log(`Found ${shifts.length} records to upload`);

        // Try to insert without deleting first
        for (let i = 0; i < shifts.length; i += 100) {
            const batch = shifts.slice(i, i + 100);
            const { error } = await supabase
                .from('shift_plan')
                .upsert(batch, {
                    onConflict: 'employee_id,month',
                    ignoreDuplicates: false
                });

            if (error) {
                // If error occurs, log the actual data being sent
                console.error('Failed batch data:', JSON.stringify(batch, null, 2));
                console.error('Error details:', error);
                throw error;
            }
        }

        toast.success('Shift data uploaded successfully');
        return await fetchEmployeesAndShifts(selectedMonth, currentTenantId);
    } catch (error) {
        console.error('Upload error:', error);
        toast.error(error instanceof Error ? error.message : 'Failed to upload shifts');
        throw error;
    }
}